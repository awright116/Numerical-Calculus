# "Using the divided difference method, print out the Hermite polynomial approximation
matrix"
# x = 3.6, 3.8, 3.9
# f(x) = 1.675, 1.436, 1.318
# f'(x) = -1.195, -1.188, -1.182

def divided_differences(x, y):
  if len(x) == 1:
      return y[0]
  else:
      return (divided_differences(x[1:], y[1:]) - divided_differences(x[:-1], y[:-1])) / (x[-1] - x[0])

def newton_polynomial(x, y, target_x, degree):
  if degree == 0:
      return y[0]
  else:
      divided_diffs = [divided_differences(x[i:i+degree+1], y[i:i+degree+1]) for i in range(len(x) - degree)]
      return (newton_polynomial(x, y, target_x, degree - 1) +
              divided_diffs[0] * product(target_x - xi for xi in x[:degree]))

def product(values):
  result = 1
  for value in values:
      result *= value
  return result

if __name__ == "__main__":
  xi = [7.2, 7.4, 7.5, 7.6]
  fxi = [23.5492, 25.3913, 26.8224, 27.4589]

  target_x = 7.3
  for degree in range(1, 4):
      polynomial = newton_polynomial(xi, fxi, target_x, degree)
      print(polynomial)
      print()
